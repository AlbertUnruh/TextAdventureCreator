from __future__ import annotations


__all__ = ()


from typing import TYPE_CHECKING

if TYPE_CHECKING:
    ...


FILE_STRUCTURE = (
    """\
# autogenerated by TextAdventureCreator (%s)
text: {text}
options:
  north: {options[north]}
  east: {options[east]}
  south: {options[south]}
  west: {options[west]}
  # enter: {options[enter]}  # coming soon, more at the end of the file
action:
  enabled: {action[enabled]}
  required:
    items: {action[required][items]}
  reward: {action[reward]}
items: {items}
"""
    % __import__("TextAdventureCreator").__url__
)


def get_defaults() -> dict:
    return {
        "text": None,
        "options": {
            "north": None,
            "east": None,
            "south": None,
            "west": None,
            "enter": None,  # coming soon, more at the end of the file
        },
        "action": {
            "enabled": False,
            "required": {
                "items": [],
            },
            "reward": None,
        },
        "items": [],
    }


def prepare_values(values: dict) -> dict:
    prepared = {}
    for key, value in values.items():
        if isinstance(value, dict):
            prepared[key] = prepare_values(value)
        elif isinstance(value, list):
            prepared[key] = str(value)
        elif value is None:
            prepared[key] = "null"
        elif value is True:
            prepared[key] = "true"
        elif value is False:
            prepared[key] = "false"
    return prepared


# More coming soon...
#
# I just looked into my old code (https://github.com/AlbertUnruh/TextAdventure)
# and realised what for a mess I made :/
# I'll clean the code first and make it more functional.
